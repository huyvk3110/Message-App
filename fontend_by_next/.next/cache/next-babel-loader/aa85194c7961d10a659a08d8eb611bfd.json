{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport API from \"../api\";\nimport { connect } from \"react-redux\";\nimport { showAlert } from \"../action/action.alert\";\nimport { updateUserData } from \"../action/action.app\";\nvar LOGIN_TYPE;\n\n(function (LOGIN_TYPE) {\n  LOGIN_TYPE[LOGIN_TYPE[\"SIGNIN\"] = 1] = \"SIGNIN\";\n  LOGIN_TYPE[LOGIN_TYPE[\"SIGNUP\"] = 2] = \"SIGNUP\";\n})(LOGIN_TYPE || (LOGIN_TYPE = {}));\n\nvar Login =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Login, _Component);\n\n  function Login(props) {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Login).call(this, props));\n    _this.state = {\n      loginType: LOGIN_TYPE.SIGNIN,\n      email: '',\n      password: '',\n      passwordConfirm: ''\n    };\n    _this.loginSuccessHandle = _this.loginSuccessHandle.bind(_assertThisInitialized(_this));\n    _this.loginFailureHandle = _this.loginFailureHandle.bind(_assertThisInitialized(_this));\n    _this.onChangeEmail = _this.onChangeEmail.bind(_assertThisInitialized(_this));\n    _this.onChangePassword = _this.onChangePassword.bind(_assertThisInitialized(_this));\n    _this.onChangeConfirmPassword = _this.onChangeConfirmPassword.bind(_assertThisInitialized(_this));\n    _this.onClickTabSignIn = _this.onClickTabSignIn.bind(_assertThisInitialized(_this));\n    _this.onClickTabSignUp = _this.onClickTabSignUp.bind(_assertThisInitialized(_this));\n    _this.onClickSubmit = _this.onClickSubmit.bind(_assertThisInitialized(_this));\n    _this.onClickLoginGoogle = _this.onClickLoginGoogle.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Login, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      API.loginToken().then(this.loginSuccessHandle)[\"catch\"](this.loginFailureHandle);\n    }\n  }, {\n    key: \"loginSuccessHandle\",\n    value: function loginSuccessHandle(data) {\n      this.props.updateUserData(data);\n    }\n  }, {\n    key: \"loginFailureHandle\",\n    value: function loginFailureHandle() {\n      this.props.updateUserData({\n        id: '',\n        name: '',\n        email: ''\n      });\n    }\n  }, {\n    key: \"onChangeEmail\",\n    value: function onChangeEmail(event) {\n      this.setState({\n        email: event.target.value\n      });\n    }\n  }, {\n    key: \"onChangePassword\",\n    value: function onChangePassword(event) {\n      this.setState({\n        password: event.target.value\n      });\n    }\n  }, {\n    key: \"onChangeConfirmPassword\",\n    value: function onChangeConfirmPassword(event) {\n      this.setState({\n        passwordConfirm: event.target.value\n      });\n    }\n  }, {\n    key: \"onClickTabSignIn\",\n    value: function onClickTabSignIn() {\n      if (this.state.loginType !== LOGIN_TYPE.SIGNIN) this.setState({\n        loginType: LOGIN_TYPE.SIGNIN\n      });\n    }\n  }, {\n    key: \"onClickTabSignUp\",\n    value: function onClickTabSignUp() {\n      if (this.state.loginType !== LOGIN_TYPE.SIGNUP) this.setState({\n        loginType: LOGIN_TYPE.SIGNUP\n      });\n    }\n  }, {\n    key: \"onClickSubmit\",\n    value: function onClickSubmit() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          loginType = _this$state.loginType,\n          email = _this$state.email,\n          password = _this$state.password,\n          passwordConfirm = _this$state.passwordConfirm;\n      if (loginType === LOGIN_TYPE.SIGNIN && (!email || !password) || loginType === LOGIN_TYPE.SIGNUP && (!email || !password || !passwordConfirm)) return;\n\n      if (loginType === LOGIN_TYPE.SIGNIN) {\n        API.login(email, password).then(this.loginSuccessHandle)[\"catch\"](this.loginFailureHandle);\n      } else if (loginType === LOGIN_TYPE.SIGNUP && password === passwordConfirm) {\n        API.register(email, password).then(function (data) {\n          if (data.data.status === 'success') _this2.setState({\n            loginType: LOGIN_TYPE.SIGNIN\n          });\n        });\n      }\n    }\n  }, {\n    key: \"onClickLoginGoogle\",\n    value: function onClickLoginGoogle() {\n      API.logout().then(function (data) {\n        return console.log(data);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var loginType = this.state.loginType;\n      return __jsx(\"div\", {\n        className: \"d-flex justify-content-center align-items-center vw-100 vh-100\"\n      }, __jsx(\"form\", {\n        className: \"form-signin text-center\",\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n        }\n      }, __jsx(\"i\", {\n        className: \"fa fa-paper-plane logo\"\n      }), __jsx(\"h1\", {\n        className: \"h3 mb-3 font-weight-normal\"\n      }, \"Message\"), __jsx(\"div\", {\n        className: \"btn-group btn-group-lg w-100\",\n        role: \"group\",\n        \"aria-label\": \"Basic example\"\n      }, __jsx(\"a\", {\n        onClick: this.onClickTabSignIn,\n        className: \"btn input-square-bottom font-weight-light \".concat(loginType === LOGIN_TYPE.SIGNIN ? \"btn-primary text-white\" : \"btn-white text-secondary\")\n      }, \"Sign in\"), __jsx(\"a\", {\n        onClick: this.onClickTabSignUp,\n        className: \"btn input-square-bottom font-weight-light \".concat(loginType === LOGIN_TYPE.SIGNUP ? \"btn-primary text-white\" : \"btn-white text-secondary\")\n      }, \"Sign up\")), __jsx(\"label\", {\n        htmlFor: \"inputEmail\",\n        className: \"sr-only\"\n      }, \"Email address\"), __jsx(\"input\", {\n        type: \"email\",\n        id: \"inputEmail\",\n        className: \"form-control input-square-bottom input-square-top\",\n        onChange: this.onChangeEmail,\n        placeholder: \"Email adress\",\n        required: true,\n        autoFocus: true\n      }), __jsx(\"label\", {\n        htmlFor: \"inputPassword\",\n        className: \"sr-only\"\n      }, \"Password\"), __jsx(\"input\", {\n        type: \"password\",\n        id: \"inputPassword\",\n        className: \"form-control input-square-top \".concat(loginType === LOGIN_TYPE.SIGNUP ? \"input-square-bottom\" : \"\"),\n        onChange: this.onChangePassword,\n        placeholder: \"Password\",\n        required: true\n      }), loginType === LOGIN_TYPE.SIGNUP && __jsx(\"label\", {\n        htmlFor: \"inputComfirmPassword\",\n        className: \"sr-only\"\n      }, \"Confirm Password\"), loginType === LOGIN_TYPE.SIGNUP && __jsx(\"input\", {\n        type: \"password\",\n        id: \"inputComfirmPassword\",\n        className: \"form-control input-square-top\",\n        onChange: this.onChangeConfirmPassword,\n        placeholder: \"Confirm password\",\n        required: loginType === LOGIN_TYPE.SIGNUP\n      }), __jsx(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary btn-block mt-3\",\n        onClick: this.onClickSubmit\n      }, loginType === LOGIN_TYPE.SIGNIN ? \"Sign in\" : \"Sign up\"), __jsx(\"button\", {\n        type: \"button\",\n        className: \"btn btn-danger btn-block mt-1\",\n        onClick: this.onClickLoginGoogle\n      }, __jsx(\"i\", {\n        className: \"fa fa-google-plus\",\n        style: {\n          fontSize: '20px'\n        }\n      }), \"  Google\")));\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    app: state.app\n  };\n};\n\nvar mapDispatchToProps = {\n  showAlert: showAlert,\n  updateUserData: updateUserData\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":null,"metadata":{},"sourceType":"module"}