{"ast":null,"code":"var _jsxFileName = \"/Users/vankhachuy/Work/Project/message_v2/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\n// import API from \"../api\";\nimport { connect } from \"react-redux\";\nimport { showAlert } from \"../action/action.alert\";\nimport { setLogged, updateUserData } from \"../action/action.app\";\nvar LOGIN_TYPE;\n\n(function (LOGIN_TYPE) {\n  LOGIN_TYPE[LOGIN_TYPE[\"SIGNIN\"] = 1] = \"SIGNIN\";\n  LOGIN_TYPE[LOGIN_TYPE[\"SIGNUP\"] = 2] = \"SIGNUP\";\n})(LOGIN_TYPE || (LOGIN_TYPE = {}));\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loginType: LOGIN_TYPE.SIGNIN,\n      email: '',\n      password: '',\n      passwordConfirm: ''\n    };\n    this.loginSuccessHandle = this.loginSuccessHandle.bind(this);\n    this.loginFailureHandle = this.loginFailureHandle.bind(this);\n    this.onChangeEmail = this.onChangeEmail.bind(this);\n    this.onChangePassword = this.onChangePassword.bind(this);\n    this.onChangeConfirmPassword = this.onChangeConfirmPassword.bind(this);\n    this.onClickTabSignIn = this.onClickTabSignIn.bind(this);\n    this.onClickTabSignUp = this.onClickTabSignUp.bind(this);\n    this.onClickSubmit = this.onClickSubmit.bind(this);\n    this.onClickLoginGoogle = this.onClickLoginGoogle.bind(this);\n  }\n\n  componentWillMount() {// API.loginToken()\n    //     .then(this.loginSuccessHandle)\n    //     .catch(this.loginFailureHandle);\n  }\n\n  loginSuccessHandle(data) {// this.props.updateUserData(data);\n    // this.props.setLogged(true);\n  }\n\n  loginFailureHandle() {// this.props.updateUserData({\n    //     id: '',\n    //     name: '',\n    //     email: '',\n    // });\n    // this.props.setLogged(false);\n  }\n\n  onChangeEmail(event) {\n    this.setState({\n      email: event.target.value\n    });\n  }\n\n  onChangePassword(event) {\n    this.setState({\n      password: event.target.value\n    });\n  }\n\n  onChangeConfirmPassword(event) {\n    this.setState({\n      passwordConfirm: event.target.value\n    });\n  }\n\n  onClickTabSignIn() {\n    if (this.state.loginType !== LOGIN_TYPE.SIGNIN) this.setState({\n      loginType: LOGIN_TYPE.SIGNIN\n    });\n  }\n\n  onClickTabSignUp() {\n    if (this.state.loginType !== LOGIN_TYPE.SIGNUP) this.setState({\n      loginType: LOGIN_TYPE.SIGNUP\n    });\n  }\n\n  onClickSubmit() {\n    const {\n      loginType,\n      email,\n      password,\n      passwordConfirm\n    } = this.state;\n    if (loginType === LOGIN_TYPE.SIGNIN && (!email || !password) || loginType === LOGIN_TYPE.SIGNUP && (!email || !password || !passwordConfirm)) return;\n\n    if (loginType === LOGIN_TYPE.SIGNIN) {// API.login(email, password)\n      //     .then(this.loginSuccessHandle)\n      //     .catch(this.loginFailureHandle)\n    } else if (loginType === LOGIN_TYPE.SIGNUP && password === passwordConfirm) {// API.register(email, password)\n      //     .then(data => {\n      //         if (data.data.status === 'success') this.setState({ loginType: LOGIN_TYPE.SIGNIN })\n      //     })\n    }\n  }\n\n  onClickLoginGoogle() {// API.logout().then(data=>console.log(data))\n  }\n\n  render() {\n    const {\n      loginType\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"d-flex justify-content-center align-items-center vw-100 vh-100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, __jsx(\"form\", {\n      className: \"form-signin text-center\",\n      onSubmit: event => {\n        event.preventDefault();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"fa fa-paper-plane logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), __jsx(\"h1\", {\n      className: \"h3 mb-3 font-weight-normal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Message\"), __jsx(\"div\", {\n      className: \"btn-group btn-group-lg w-100\",\n      role: \"group\",\n      \"aria-label\": \"Basic example\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      onClick: this.onClickTabSignIn,\n      className: `btn input-square-bottom font-weight-light ${loginType === LOGIN_TYPE.SIGNIN ? \"btn-primary text-white\" : \"btn-white text-secondary\"}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Sign in\"), __jsx(\"a\", {\n      onClick: this.onClickTabSignUp,\n      className: `btn input-square-bottom font-weight-light ${loginType === LOGIN_TYPE.SIGNUP ? \"btn-primary text-white\" : \"btn-white text-secondary\"}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Sign up\")), __jsx(\"label\", {\n      htmlFor: \"inputEmail\",\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Email address\"), __jsx(\"input\", {\n      type: \"email\",\n      id: \"inputEmail\",\n      className: \"form-control input-square-bottom input-square-top\",\n      onChange: this.onChangeEmail,\n      placeholder: \"Email adress\",\n      required: true,\n      autoFocus: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), __jsx(\"label\", {\n      htmlFor: \"inputPassword\",\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Password\"), __jsx(\"input\", {\n      type: \"password\",\n      id: \"inputPassword\",\n      className: `form-control input-square-top ${loginType === LOGIN_TYPE.SIGNUP ? \"input-square-bottom\" : \"\"}`,\n      onChange: this.onChangePassword,\n      placeholder: \"Password\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), loginType === LOGIN_TYPE.SIGNUP && __jsx(\"label\", {\n      htmlFor: \"inputComfirmPassword\",\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Confirm Password\"), loginType === LOGIN_TYPE.SIGNUP && __jsx(\"input\", {\n      type: \"password\",\n      id: \"inputComfirmPassword\",\n      className: \"form-control input-square-top\",\n      onChange: this.onChangeConfirmPassword,\n      placeholder: \"Confirm password\",\n      required: loginType === LOGIN_TYPE.SIGNUP,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary btn-block mt-3\",\n      onClick: this.onClickSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, loginType === LOGIN_TYPE.SIGNIN ? \"Sign in\" : \"Sign up\"), __jsx(\"button\", {\n      type: \"button\",\n      className: \"btn btn-danger btn-block mt-1\",\n      onClick: this.onClickLoginGoogle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, __jsx(\"i\", {\n      className: \"fa fa-google-plus\",\n      style: {\n        fontSize: '20px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), \"  Google\")));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  app: state.app\n});\n\nconst mapDispatchToProps = {\n  showAlert,\n  setLogged,\n  updateUserData\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/Users/vankhachuy/Work/Project/message_v2/pages/index.tsx"],"names":["React","Component","connect","showAlert","setLogged","updateUserData","LOGIN_TYPE","Login","constructor","props","state","loginType","SIGNIN","email","password","passwordConfirm","loginSuccessHandle","bind","loginFailureHandle","onChangeEmail","onChangePassword","onChangeConfirmPassword","onClickTabSignIn","onClickTabSignUp","onClickSubmit","onClickLoginGoogle","componentWillMount","data","event","setState","target","value","SIGNUP","render","preventDefault","fontSize","mapStateToProps","app","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component, SyntheticEvent } from \"react\";\nimport Link from \"next/link\";\n// import API from \"../api\";\nimport { connect } from \"react-redux\";\nimport { showAlert } from \"../action/action.alert\";\nimport { setLogged, updateUserData } from \"../action/action.app\";\nimport { IStoreApp } from \"../define/define.interface\";\n\nenum LOGIN_TYPE {\n    SIGNIN = 1,\n    SIGNUP = 2,\n}\n\ninterface IProps {\n    app: IStoreApp\n    showAlert: typeof showAlert\n    setLogged: typeof setLogged\n    updateUserData: typeof updateUserData\n}\n\ninterface IStates {\n    loginType: LOGIN_TYPE,\n    email: string,\n    password: string,\n    passwordConfirm: string,\n}\n\nclass Login extends Component<IProps, IStates> {\n    constructor(props: IProps) {\n        super(props)\n\n        this.state = {\n            loginType: LOGIN_TYPE.SIGNIN,\n            email: '',\n            password: '',\n            passwordConfirm: '',\n        }\n\n        this.loginSuccessHandle = this.loginSuccessHandle.bind(this);\n        this.loginFailureHandle = this.loginFailureHandle.bind(this);\n        this.onChangeEmail = this.onChangeEmail.bind(this);\n        this.onChangePassword = this.onChangePassword.bind(this);\n        this.onChangeConfirmPassword = this.onChangeConfirmPassword.bind(this);\n        this.onClickTabSignIn = this.onClickTabSignIn.bind(this);\n        this.onClickTabSignUp = this.onClickTabSignUp.bind(this);\n        this.onClickSubmit = this.onClickSubmit.bind(this);\n        this.onClickLoginGoogle = this.onClickLoginGoogle.bind(this);\n    }\n\n    componentWillMount() {\n        // API.loginToken()\n        //     .then(this.loginSuccessHandle)\n        //     .catch(this.loginFailureHandle);\n    }\n\n    loginSuccessHandle(data: any) {\n        // this.props.updateUserData(data);\n        // this.props.setLogged(true);\n    }\n\n    loginFailureHandle() {\n        // this.props.updateUserData({\n        //     id: '',\n        //     name: '',\n        //     email: '',\n        // });\n        // this.props.setLogged(false);\n    }\n\n    onChangeEmail(event: any) {\n        this.setState({ email: event.target.value });\n    }\n\n    onChangePassword(event: any) {\n        this.setState({ password: event.target.value });\n    }\n\n    onChangeConfirmPassword(event: any) {\n        this.setState({ passwordConfirm: event.target.value });\n    }\n\n    onClickTabSignIn() {\n        if (this.state.loginType !== LOGIN_TYPE.SIGNIN)\n            this.setState({ loginType: LOGIN_TYPE.SIGNIN });\n    }\n\n    onClickTabSignUp() {\n        if (this.state.loginType !== LOGIN_TYPE.SIGNUP)\n            this.setState({ loginType: LOGIN_TYPE.SIGNUP });\n    }\n\n    onClickSubmit() {\n        const { loginType, email, password, passwordConfirm } = this.state;\n        if (loginType === LOGIN_TYPE.SIGNIN && (!email || !password) ||\n            loginType === LOGIN_TYPE.SIGNUP && (!email || !password || !passwordConfirm)) return;\n\n        if (loginType === LOGIN_TYPE.SIGNIN) {\n            // API.login(email, password)\n            //     .then(this.loginSuccessHandle)\n            //     .catch(this.loginFailureHandle)\n        } else if (loginType === LOGIN_TYPE.SIGNUP && password === passwordConfirm) {\n            // API.register(email, password)\n            //     .then(data => {\n            //         if (data.data.status === 'success') this.setState({ loginType: LOGIN_TYPE.SIGNIN })\n            //     })\n        }\n    }\n\n    onClickLoginGoogle() {\n        // API.logout().then(data=>console.log(data))\n    }\n\n    render() {\n        const { loginType } = this.state;\n\n        return (\n            < div className=\"d-flex justify-content-center align-items-center vw-100 vh-100\" >\n                <form className=\"form-signin text-center\" onSubmit={(event) => { event.preventDefault() }}>\n                    <i className=\"fa fa-paper-plane logo\"></i>\n                    <h1 className=\"h3 mb-3 font-weight-normal\">Message</h1>\n                    <div className=\"btn-group btn-group-lg w-100\" role=\"group\" aria-label=\"Basic example\">\n                        <a onClick={this.onClickTabSignIn} className={`btn input-square-bottom font-weight-light ${loginType === LOGIN_TYPE.SIGNIN ? \"btn-primary text-white\" : \"btn-white text-secondary\"}`}>Sign in</a>\n                        <a onClick={this.onClickTabSignUp} className={`btn input-square-bottom font-weight-light ${loginType === LOGIN_TYPE.SIGNUP ? \"btn-primary text-white\" : \"btn-white text-secondary\"}`}>Sign up</a>\n                    </div>\n                    <label htmlFor=\"inputEmail\" className=\"sr-only\">Email address</label>\n                    <input type=\"email\" id=\"inputEmail\" className=\"form-control input-square-bottom input-square-top\" onChange={this.onChangeEmail} placeholder=\"Email adress\" required autoFocus />\n                    <label htmlFor=\"inputPassword\" className=\"sr-only\">Password</label>\n                    <input type=\"password\" id=\"inputPassword\" className={`form-control input-square-top ${loginType === LOGIN_TYPE.SIGNUP ? \"input-square-bottom\" : \"\"}`} onChange={this.onChangePassword} placeholder=\"Password\" required />\n                    {loginType === LOGIN_TYPE.SIGNUP && <label htmlFor=\"inputComfirmPassword\" className=\"sr-only\">Confirm Password</label>}\n                    {loginType === LOGIN_TYPE.SIGNUP && <input type=\"password\" id=\"inputComfirmPassword\" className=\"form-control input-square-top\" onChange={this.onChangeConfirmPassword} placeholder=\"Confirm password\" required={loginType === LOGIN_TYPE.SIGNUP} />}\n                    <button type=\"submit\" className=\"btn btn-primary btn-block mt-3\" onClick={this.onClickSubmit}>{loginType === LOGIN_TYPE.SIGNIN ? \"Sign in\" : \"Sign up\"}</button>\n                    <button type=\"button\" className=\"btn btn-danger btn-block mt-1\" onClick={this.onClickLoginGoogle}><i className=\"fa fa-google-plus\" style={{ fontSize: '20px' }}></i>  Google</button>\n                </form>\n            </div >\n        )\n    }\n}\n\nconst mapStateToProps = (state: any) => ({\n    app: state.app\n})\n\nconst mapDispatchToProps = {\n    showAlert, setLogged, updateUserData\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);"]},"metadata":{},"sourceType":"module"}