{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport API from \"../api\";\nimport { connect } from \"react-redux\";\nimport { showAlert } from \"../action/action.alert\";\nimport { updateUserData } from \"../action/action.app\";\nvar LOGIN_TYPE;\n\n(function (LOGIN_TYPE) {\n  LOGIN_TYPE[LOGIN_TYPE[\"SIGNIN\"] = 1] = \"SIGNIN\";\n  LOGIN_TYPE[LOGIN_TYPE[\"SIGNUP\"] = 2] = \"SIGNUP\";\n})(LOGIN_TYPE || (LOGIN_TYPE = {}));\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loginType: LOGIN_TYPE.SIGNIN,\n      email: '',\n      password: '',\n      passwordConfirm: ''\n    };\n    this.loginSuccessHandle = this.loginSuccessHandle.bind(this);\n    this.loginFailureHandle = this.loginFailureHandle.bind(this);\n    this.onChangeEmail = this.onChangeEmail.bind(this);\n    this.onChangePassword = this.onChangePassword.bind(this);\n    this.onChangeConfirmPassword = this.onChangeConfirmPassword.bind(this);\n    this.onClickTabSignIn = this.onClickTabSignIn.bind(this);\n    this.onClickTabSignUp = this.onClickTabSignUp.bind(this);\n    this.onClickSubmit = this.onClickSubmit.bind(this);\n    this.onClickLoginGoogle = this.onClickLoginGoogle.bind(this);\n  }\n\n  componentWillMount() {\n    API.loginToken().then(this.loginSuccessHandle).catch(this.loginFailureHandle);\n  }\n\n  loginSuccessHandle(data) {\n    this.props.updateUserData(data);\n  }\n\n  loginFailureHandle() {\n    this.props.updateUserData({\n      id: '',\n      name: '',\n      email: ''\n    });\n  }\n\n  onChangeEmail(event) {\n    this.setState({\n      email: event.target.value\n    });\n  }\n\n  onChangePassword(event) {\n    this.setState({\n      password: event.target.value\n    });\n  }\n\n  onChangeConfirmPassword(event) {\n    this.setState({\n      passwordConfirm: event.target.value\n    });\n  }\n\n  onClickTabSignIn() {\n    if (this.state.loginType !== LOGIN_TYPE.SIGNIN) this.setState({\n      loginType: LOGIN_TYPE.SIGNIN\n    });\n  }\n\n  onClickTabSignUp() {\n    if (this.state.loginType !== LOGIN_TYPE.SIGNUP) this.setState({\n      loginType: LOGIN_TYPE.SIGNUP\n    });\n  }\n\n  onClickSubmit() {\n    const {\n      loginType,\n      email,\n      password,\n      passwordConfirm\n    } = this.state;\n    if (loginType === LOGIN_TYPE.SIGNIN && (!email || !password) || loginType === LOGIN_TYPE.SIGNUP && (!email || !password || !passwordConfirm)) return;\n\n    if (loginType === LOGIN_TYPE.SIGNIN) {\n      API.login(email, password).then(this.loginSuccessHandle).catch(this.loginFailureHandle);\n    } else if (loginType === LOGIN_TYPE.SIGNUP && password === passwordConfirm) {\n      API.register(email, password).then(data => {\n        if (data.data.status === 'success') this.setState({\n          loginType: LOGIN_TYPE.SIGNIN\n        });\n      });\n    }\n  }\n\n  onClickLoginGoogle() {\n    API.logout().then(data => console.log(data));\n  }\n\n  render() {\n    const {\n      loginType\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"d-flex justify-content-center align-items-center vw-100 vh-100\"\n    }, __jsx(\"form\", {\n      className: \"form-signin text-center\",\n      onSubmit: event => {\n        event.preventDefault();\n      }\n    }, __jsx(\"i\", {\n      className: \"fa fa-paper-plane logo\"\n    }), __jsx(\"h1\", {\n      className: \"h3 mb-3 font-weight-normal\"\n    }, \"Message\"), __jsx(\"div\", {\n      className: \"btn-group btn-group-lg w-100\",\n      role: \"group\",\n      \"aria-label\": \"Basic example\"\n    }, __jsx(\"a\", {\n      onClick: this.onClickTabSignIn,\n      className: `btn input-square-bottom font-weight-light ${loginType === LOGIN_TYPE.SIGNIN ? \"btn-primary text-white\" : \"btn-white text-secondary\"}`\n    }, \"Sign in\"), __jsx(\"a\", {\n      onClick: this.onClickTabSignUp,\n      className: `btn input-square-bottom font-weight-light ${loginType === LOGIN_TYPE.SIGNUP ? \"btn-primary text-white\" : \"btn-white text-secondary\"}`\n    }, \"Sign up\")), __jsx(\"label\", {\n      htmlFor: \"inputEmail\",\n      className: \"sr-only\"\n    }, \"Email address\"), __jsx(\"input\", {\n      type: \"email\",\n      id: \"inputEmail\",\n      className: \"form-control input-square-bottom input-square-top\",\n      onChange: this.onChangeEmail,\n      placeholder: \"Email adress\",\n      required: true,\n      autoFocus: true\n    }), __jsx(\"label\", {\n      htmlFor: \"inputPassword\",\n      className: \"sr-only\"\n    }, \"Password\"), __jsx(\"input\", {\n      type: \"password\",\n      id: \"inputPassword\",\n      className: `form-control input-square-top ${loginType === LOGIN_TYPE.SIGNUP ? \"input-square-bottom\" : \"\"}`,\n      onChange: this.onChangePassword,\n      placeholder: \"Password\",\n      required: true\n    }), loginType === LOGIN_TYPE.SIGNUP && __jsx(\"label\", {\n      htmlFor: \"inputComfirmPassword\",\n      className: \"sr-only\"\n    }, \"Confirm Password\"), loginType === LOGIN_TYPE.SIGNUP && __jsx(\"input\", {\n      type: \"password\",\n      id: \"inputComfirmPassword\",\n      className: \"form-control input-square-top\",\n      onChange: this.onChangeConfirmPassword,\n      placeholder: \"Confirm password\",\n      required: loginType === LOGIN_TYPE.SIGNUP\n    }), __jsx(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary btn-block mt-3\",\n      onClick: this.onClickSubmit\n    }, loginType === LOGIN_TYPE.SIGNIN ? \"Sign in\" : \"Sign up\"), __jsx(\"button\", {\n      type: \"button\",\n      className: \"btn btn-danger btn-block mt-1\",\n      onClick: this.onClickLoginGoogle\n    }, __jsx(\"i\", {\n      className: \"fa fa-google-plus\",\n      style: {\n        fontSize: '20px'\n      }\n    }), \"  Google\")));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  app: state.app\n});\n\nconst mapDispatchToProps = {\n  showAlert,\n  updateUserData\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":null,"metadata":{},"sourceType":"module"}