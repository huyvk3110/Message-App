{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { default as axios } from \"axios\";\nconst HOST = 'http://127.0.0.1:3001';\nexport default class API {\n  static login(email, password) {\n    return new Promise((res, rej) => {\n      axios.post(`${HOST}/api/auth/login`, {\n        username: email,\n        password\n      }, {\n        headers: API.headers\n      }).then(response => {\n        const {\n          status,\n          authenticate,\n          data\n        } = response.data;\n        console.log(response);\n\n        if (status === 'success') {\n          localStorage.setItem('token', authenticate);\n          API.headers = Object.assign({}, API.headers, {\n            'Authorization': `Bearer ${authenticate}`\n          });\n          res(data);\n        }\n      }).catch(error => console.log('error', error));\n    });\n  }\n\n  static loginToken() {\n    return new Promise((res, rej) => {\n      const token = localStorage.getItem('token');\n      if (!token) return rej();\n      API.headers = Object.assign({}, API.headers, {\n        'Authorization': `Bearer ${token}`\n      });\n      axios.post(`${HOST}/api/auth/login-jwt`, {}, {\n        headers: API.headers\n      }).then(response => {\n        const {\n          status,\n          authenticate,\n          data\n        } = response.data;\n\n        if (status === 'success') {\n          res(data);\n        }\n      }).catch(error => rej(error));\n    });\n  }\n\n  static register(email, password) {\n    return axios.post(`${HOST}/api/account`, {\n      email,\n      password\n    }, {\n      headers: API.headers\n    });\n  }\n\n  static logout() {\n    return axios.post(`${HOST}/api/auth/logout`);\n  }\n\n  static getAccount() {\n    return axios.get(`${HOST}/api/account`, {\n      headers: API.headers\n    });\n  }\n\n}\n\n_defineProperty(API, \"headers\", {\n  'Content-Type': 'application/json'\n});","map":{"version":3,"sources":["/Users/vankhachuy/Work/Project/message_v2/api.ts"],"names":["default","axios","HOST","API","login","email","password","Promise","res","rej","post","username","headers","then","response","status","authenticate","data","console","log","localStorage","setItem","Object","assign","catch","error","loginToken","token","getItem","register","logout","getAccount","get"],"mappings":"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","sourcesContent":["import { default as axios } from \"axios\";\n\nconst HOST = 'http://127.0.0.1:3001'\n\nexport default class API {\n    static headers = {\n        'Content-Type': 'application/json'\n    }\n\n    static login(email: string, password: string): Promise<any> {\n        return new Promise((res, rej) => {\n            axios.post(`${HOST}/api/auth/login`, { username: email, password }, { headers: API.headers })\n                .then((response) => {\n                    const { status, authenticate, data } = response.data;\n                    console.log(response)\n                    if (status === 'success') {\n                        localStorage.setItem('token', authenticate);\n                        API.headers = Object.assign({}, API.headers, { 'Authorization': `Bearer ${authenticate}` })\n                        res(data)\n                    }\n                })\n                .catch(error => console.log('error', error))\n        })\n    }\n\n    static loginToken(): Promise<any> {\n        return new Promise((res, rej) => {\n            const token = localStorage.getItem('token');\n            if (!token) return rej();\n            API.headers = Object.assign({}, API.headers, { 'Authorization': `Bearer ${token}` })\n\n            axios.post(`${HOST}/api/auth/login-jwt`, {}, { headers: API.headers })\n                .then((response) => {\n                    const { status, authenticate, data } = response.data;\n                    if (status === 'success') {\n                        res(data)\n                    }\n                })\n                .catch(error => rej(error))\n        })\n    }\n\n    static register(email: string, password: string) {\n        return axios.post(`${HOST}/api/account`, { email, password }, { headers: API.headers })\n    }\n\n    static logout() {\n        return axios.post(`${HOST}/api/auth/logout`)\n    }\n\n    static getAccount() {\n        return axios.get(`${HOST}/api/account`, { headers: API.headers })\n    }\n}"]},"metadata":{},"sourceType":"module"}