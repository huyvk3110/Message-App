{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/vankhachuy/Work/Project/message_v2/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\n// import API from \"../api\";\nimport { connect } from \"react-redux\";\nimport { showAlert } from \"../action/action.alert\";\nimport { setLogged, updateUserData } from \"../action/action.app\";\nvar LOGIN_TYPE;\n\n(function (LOGIN_TYPE) {\n  LOGIN_TYPE[LOGIN_TYPE[\"SIGNIN\"] = 1] = \"SIGNIN\";\n  LOGIN_TYPE[LOGIN_TYPE[\"SIGNUP\"] = 2] = \"SIGNUP\";\n})(LOGIN_TYPE || (LOGIN_TYPE = {}));\n\nvar Login =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Login, _Component);\n\n  function Login(props) {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Login).call(this, props));\n    _this.state = {\n      loginType: LOGIN_TYPE.SIGNIN,\n      email: '',\n      password: '',\n      passwordConfirm: ''\n    };\n    _this.loginSuccessHandle = _this.loginSuccessHandle.bind(_assertThisInitialized(_this));\n    _this.loginFailureHandle = _this.loginFailureHandle.bind(_assertThisInitialized(_this));\n    _this.onChangeEmail = _this.onChangeEmail.bind(_assertThisInitialized(_this));\n    _this.onChangePassword = _this.onChangePassword.bind(_assertThisInitialized(_this));\n    _this.onChangeConfirmPassword = _this.onChangeConfirmPassword.bind(_assertThisInitialized(_this));\n    _this.onClickTabSignIn = _this.onClickTabSignIn.bind(_assertThisInitialized(_this));\n    _this.onClickTabSignUp = _this.onClickTabSignUp.bind(_assertThisInitialized(_this));\n    _this.onClickSubmit = _this.onClickSubmit.bind(_assertThisInitialized(_this));\n    _this.onClickLoginGoogle = _this.onClickLoginGoogle.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Login, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {// API.loginToken()\n      //     .then(this.loginSuccessHandle)\n      //     .catch(this.loginFailureHandle);\n    }\n  }, {\n    key: \"loginSuccessHandle\",\n    value: function loginSuccessHandle(data) {// this.props.updateUserData(data);\n      // this.props.setLogged(true);\n    }\n  }, {\n    key: \"loginFailureHandle\",\n    value: function loginFailureHandle() {// this.props.updateUserData({\n      //     id: '',\n      //     name: '',\n      //     email: '',\n      // });\n      // this.props.setLogged(false);\n    }\n  }, {\n    key: \"onChangeEmail\",\n    value: function onChangeEmail(event) {\n      this.setState({\n        email: event.target.value\n      });\n    }\n  }, {\n    key: \"onChangePassword\",\n    value: function onChangePassword(event) {\n      this.setState({\n        password: event.target.value\n      });\n    }\n  }, {\n    key: \"onChangeConfirmPassword\",\n    value: function onChangeConfirmPassword(event) {\n      this.setState({\n        passwordConfirm: event.target.value\n      });\n    }\n  }, {\n    key: \"onClickTabSignIn\",\n    value: function onClickTabSignIn() {\n      if (this.state.loginType !== LOGIN_TYPE.SIGNIN) this.setState({\n        loginType: LOGIN_TYPE.SIGNIN\n      });\n    }\n  }, {\n    key: \"onClickTabSignUp\",\n    value: function onClickTabSignUp() {\n      if (this.state.loginType !== LOGIN_TYPE.SIGNUP) this.setState({\n        loginType: LOGIN_TYPE.SIGNUP\n      });\n    }\n  }, {\n    key: \"onClickSubmit\",\n    value: function onClickSubmit() {\n      var _this$state = this.state,\n          loginType = _this$state.loginType,\n          email = _this$state.email,\n          password = _this$state.password,\n          passwordConfirm = _this$state.passwordConfirm;\n      if (loginType === LOGIN_TYPE.SIGNIN && (!email || !password) || loginType === LOGIN_TYPE.SIGNUP && (!email || !password || !passwordConfirm)) return;\n\n      if (loginType === LOGIN_TYPE.SIGNIN) {// API.login(email, password)\n        //     .then(this.loginSuccessHandle)\n        //     .catch(this.loginFailureHandle)\n      } else if (loginType === LOGIN_TYPE.SIGNUP && password === passwordConfirm) {// API.register(email, password)\n        //     .then(data => {\n        //         if (data.data.status === 'success') this.setState({ loginType: LOGIN_TYPE.SIGNIN })\n        //     })\n      }\n    }\n  }, {\n    key: \"onClickLoginGoogle\",\n    value: function onClickLoginGoogle() {\n      console.log('On click google'); // API.logout().then(data=>console.log(data))\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var loginType = this.state.loginType;\n      return __jsx(\"div\", {\n        className: \"d-flex justify-content-center align-items-center vw-100 vh-100\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, __jsx(\"form\", {\n        className: \"form-signin text-center\",\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, __jsx(\"i\", {\n        className: \"fa fa-paper-plane logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }), __jsx(\"h1\", {\n        className: \"h3 mb-3 font-weight-normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Message\"), __jsx(\"div\", {\n        className: \"btn-group btn-group-lg w-100\",\n        role: \"group\",\n        \"aria-label\": \"Basic example\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, __jsx(\"a\", {\n        onClick: this.onClickTabSignIn,\n        className: \"btn input-square-bottom font-weight-light \".concat(loginType === LOGIN_TYPE.SIGNIN ? \"btn-primary text-white\" : \"btn-white text-secondary\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Sign in\"), __jsx(\"a\", {\n        onClick: this.onClickTabSignUp,\n        className: \"btn input-square-bottom font-weight-light \".concat(loginType === LOGIN_TYPE.SIGNUP ? \"btn-primary text-white\" : \"btn-white text-secondary\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Sign up\")), __jsx(\"label\", {\n        htmlFor: \"inputEmail\",\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Email address\"), __jsx(\"input\", {\n        type: \"email\",\n        id: \"inputEmail\",\n        className: \"form-control input-square-bottom input-square-top\",\n        onChange: this.onChangeEmail,\n        placeholder: \"Email adress\",\n        required: true,\n        autoFocus: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }), __jsx(\"label\", {\n        htmlFor: \"inputPassword\",\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Password\"), __jsx(\"input\", {\n        type: \"password\",\n        id: \"inputPassword\",\n        className: \"form-control input-square-top \".concat(loginType === LOGIN_TYPE.SIGNUP ? \"input-square-bottom\" : \"\"),\n        onChange: this.onChangePassword,\n        placeholder: \"Password\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), loginType === LOGIN_TYPE.SIGNUP && __jsx(\"label\", {\n        htmlFor: \"inputComfirmPassword\",\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"Confirm Password\"), loginType === LOGIN_TYPE.SIGNUP && __jsx(\"input\", {\n        type: \"password\",\n        id: \"inputComfirmPassword\",\n        className: \"form-control input-square-top\",\n        onChange: this.onChangeConfirmPassword,\n        placeholder: \"Confirm password\",\n        required: loginType === LOGIN_TYPE.SIGNUP,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), __jsx(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary btn-block mt-3\",\n        onClick: this.onClickSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, loginType === LOGIN_TYPE.SIGNIN ? \"Sign in\" : \"Sign up\"), __jsx(\"button\", {\n        type: \"button\",\n        className: \"btn btn-danger btn-block mt-1\",\n        onClick: this.onClickLoginGoogle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, __jsx(\"i\", {\n        className: \"fa fa-google-plus\",\n        style: {\n          fontSize: '20px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), \"  Google\")));\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    app: state.app\n  };\n};\n\nvar mapDispatchToProps = {\n  showAlert: showAlert,\n  setLogged: setLogged,\n  updateUserData: updateUserData\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/Users/vankhachuy/Work/Project/message_v2/pages/index.tsx"],"names":["React","Component","connect","showAlert","setLogged","updateUserData","LOGIN_TYPE","Login","props","state","loginType","SIGNIN","email","password","passwordConfirm","loginSuccessHandle","bind","loginFailureHandle","onChangeEmail","onChangePassword","onChangeConfirmPassword","onClickTabSignIn","onClickTabSignUp","onClickSubmit","onClickLoginGoogle","data","event","setState","target","value","SIGNUP","console","log","preventDefault","fontSize","mapStateToProps","app","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component, SyntheticEvent } from \"react\";\nimport Link from \"next/link\";\n// import API from \"../api\";\nimport { connect } from \"react-redux\";\nimport { showAlert } from \"../action/action.alert\";\nimport { setLogged, updateUserData } from \"../action/action.app\";\nimport { IStoreApp } from \"../define/define.interface\";\n\nenum LOGIN_TYPE {\n    SIGNIN = 1,\n    SIGNUP = 2,\n}\n\ninterface IProps {\n    app: IStoreApp\n    showAlert: typeof showAlert\n    setLogged: typeof setLogged\n    updateUserData: typeof updateUserData\n}\n\ninterface IStates {\n    loginType: LOGIN_TYPE,\n    email: string,\n    password: string,\n    passwordConfirm: string,\n}\n\nclass Login extends Component<IProps, IStates> {\n    constructor(props: IProps) {\n        super(props)\n\n        this.state = {\n            loginType: LOGIN_TYPE.SIGNIN,\n            email: '',\n            password: '',\n            passwordConfirm: '',\n        }\n\n        this.loginSuccessHandle = this.loginSuccessHandle.bind(this);\n        this.loginFailureHandle = this.loginFailureHandle.bind(this);\n        this.onChangeEmail = this.onChangeEmail.bind(this);\n        this.onChangePassword = this.onChangePassword.bind(this);\n        this.onChangeConfirmPassword = this.onChangeConfirmPassword.bind(this);\n        this.onClickTabSignIn = this.onClickTabSignIn.bind(this);\n        this.onClickTabSignUp = this.onClickTabSignUp.bind(this);\n        this.onClickSubmit = this.onClickSubmit.bind(this);\n        this.onClickLoginGoogle = this.onClickLoginGoogle.bind(this);\n    }\n\n    componentWillMount() {\n        // API.loginToken()\n        //     .then(this.loginSuccessHandle)\n        //     .catch(this.loginFailureHandle);\n    }\n\n    loginSuccessHandle(data: any) {\n        // this.props.updateUserData(data);\n        // this.props.setLogged(true);\n    }\n\n    loginFailureHandle() {\n        // this.props.updateUserData({\n        //     id: '',\n        //     name: '',\n        //     email: '',\n        // });\n        // this.props.setLogged(false);\n    }\n\n    onChangeEmail(event: any) {\n        this.setState({ email: event.target.value });\n    }\n\n    onChangePassword(event: any) {\n        this.setState({ password: event.target.value });\n    }\n\n    onChangeConfirmPassword(event: any) {\n        this.setState({ passwordConfirm: event.target.value });\n    }\n\n    onClickTabSignIn() {\n        if (this.state.loginType !== LOGIN_TYPE.SIGNIN)\n            this.setState({ loginType: LOGIN_TYPE.SIGNIN });\n    }\n\n    onClickTabSignUp() {\n        if (this.state.loginType !== LOGIN_TYPE.SIGNUP)\n            this.setState({ loginType: LOGIN_TYPE.SIGNUP });\n    }\n\n    onClickSubmit() {\n        const { loginType, email, password, passwordConfirm } = this.state;\n        if (loginType === LOGIN_TYPE.SIGNIN && (!email || !password) ||\n            loginType === LOGIN_TYPE.SIGNUP && (!email || !password || !passwordConfirm)) return;\n\n        if (loginType === LOGIN_TYPE.SIGNIN) {\n            // API.login(email, password)\n            //     .then(this.loginSuccessHandle)\n            //     .catch(this.loginFailureHandle)\n        } else if (loginType === LOGIN_TYPE.SIGNUP && password === passwordConfirm) {\n            // API.register(email, password)\n            //     .then(data => {\n            //         if (data.data.status === 'success') this.setState({ loginType: LOGIN_TYPE.SIGNIN })\n            //     })\n        }\n    }\n\n    onClickLoginGoogle() {\n        console.log('On click google')\n        // API.logout().then(data=>console.log(data))\n    }\n\n    render() {\n        const { loginType } = this.state;\n\n        return (\n            < div className=\"d-flex justify-content-center align-items-center vw-100 vh-100\" >\n                <form className=\"form-signin text-center\" onSubmit={(event) => { event.preventDefault() }}>\n                    <i className=\"fa fa-paper-plane logo\"></i>\n                    <h1 className=\"h3 mb-3 font-weight-normal\">Message</h1>\n                    <div className=\"btn-group btn-group-lg w-100\" role=\"group\" aria-label=\"Basic example\">\n                        <a onClick={this.onClickTabSignIn} className={`btn input-square-bottom font-weight-light ${loginType === LOGIN_TYPE.SIGNIN ? \"btn-primary text-white\" : \"btn-white text-secondary\"}`}>Sign in</a>\n                        <a onClick={this.onClickTabSignUp} className={`btn input-square-bottom font-weight-light ${loginType === LOGIN_TYPE.SIGNUP ? \"btn-primary text-white\" : \"btn-white text-secondary\"}`}>Sign up</a>\n                    </div>\n                    <label htmlFor=\"inputEmail\" className=\"sr-only\">Email address</label>\n                    <input type=\"email\" id=\"inputEmail\" className=\"form-control input-square-bottom input-square-top\" onChange={this.onChangeEmail} placeholder=\"Email adress\" required autoFocus />\n                    <label htmlFor=\"inputPassword\" className=\"sr-only\">Password</label>\n                    <input type=\"password\" id=\"inputPassword\" className={`form-control input-square-top ${loginType === LOGIN_TYPE.SIGNUP ? \"input-square-bottom\" : \"\"}`} onChange={this.onChangePassword} placeholder=\"Password\" required />\n                    {loginType === LOGIN_TYPE.SIGNUP && <label htmlFor=\"inputComfirmPassword\" className=\"sr-only\">Confirm Password</label>}\n                    {loginType === LOGIN_TYPE.SIGNUP && <input type=\"password\" id=\"inputComfirmPassword\" className=\"form-control input-square-top\" onChange={this.onChangeConfirmPassword} placeholder=\"Confirm password\" required={loginType === LOGIN_TYPE.SIGNUP} />}\n                    <button type=\"submit\" className=\"btn btn-primary btn-block mt-3\" onClick={this.onClickSubmit}>{loginType === LOGIN_TYPE.SIGNIN ? \"Sign in\" : \"Sign up\"}</button>\n                    <button type=\"button\" className=\"btn btn-danger btn-block mt-1\" onClick={this.onClickLoginGoogle}><i className=\"fa fa-google-plus\" style={{ fontSize: '20px' }}></i>  Google</button>\n                </form>\n            </div >\n        )\n    }\n}\n\nconst mapStateToProps = (state: any) => ({\n    app: state.app\n})\n\nconst mapDispatchToProps = {\n    showAlert, setLogged, updateUserData\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);"]},"metadata":{},"sourceType":"module"}